// Create the map
let map = L.map("map", {
    center: [33.80944534935707, -117.91977387277498],
    zoom: 16
});

// Create the title layer that will be the background of the map
let streetmap = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// Load Disney CSV file using D3.js - code generated by Xpert Learning Assistant (January 2025)
d3.csv('output_data/disney_df.csv').then(function(data){

    // Create marker for coordinates - updated with code generated by Xpert Learning Assistant (January 2025)
    let restaurantMarkers = [];
    let showsMarkers = [];
    let attractionMarkers = [];

    // Loop through each row and extract latitude and longitude from CSV file
    data.forEach(function(row){
        let lat = parseFloat(row.Latitude);
        let long = parseFloat(row.Longitude);
        console.log(row)

        // Create marker - code generated by OpenAI's ChatGPT (January 2025)
        let restaurantMarker = L.circleMarker([lat, long],{
            radius: 8,
            color: '#393E8F',
            weight: 1,
            fillColor: '#393E8F',
            fillOpacity: 0.8
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, 
                        {permanent: false, sticky:true}); 

        let showsMarker = L.circleMarker([lat, long],{
            radius: 8,
            color: '#F3CC64',
            weight: 1,
            fillColor: '#F3CC64',
            fillOpacity: 0.8
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, 
                        {permanent: false, sticky:true}); 

        let attractionMarker = L.circleMarker([lat, long],{
            radius: 8,
            color: '#B12228',
            weight: 1,
            fillColor: '#B12228',
            fillOpacity: 0.8
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, 
                        {permanent: false, sticky:true}); 

        // Create categories per type of entity
        if(row.Entity === "RESTAURANT"){
            restaurantMarkers.push(restaurantMarker);
        } else if(row.Entity === "SHOW"){
            showsMarkers.push(showsMarker);
        } else if(row.Entity === "ATTRACTION"){
            attractionMarkers.push(attractionMarker);
        }
    });

    // Add show markers to map - code generated by Xpert Learning Assistant (January 2025)
    function showMarkers(markers){
        markers.forEach(marker => marker.addTo(map));
    }

    // Add hide markers to map - code generated by Xpert Learning Assistant (January 2025)
    function hideMarkers(markers){
        markers.forEach(marker => map.removeLayer(marker));
    }

    // Create checkboxes for entity options - code generated by Xpert Learning Assistant (January 2025)
    document.querySelectorAll("#filter-select input[type='checkbox']").forEach(function(checkbox){
        checkbox.addEventListener("change", function(event){
            
            // Hide markers
            hideMarkers(restaurantMarkers);
            hideMarkers(showsMarkers);
            hideMarkers(attractionMarkers);

            // Show markers based on selection
            if (document.getElementById("restaurants").checked){
                showMarkers(restaurantMarkers);
            } 
            if (document.getElementById("shows").checked){
                showMarkers(showsMarkers);
            } 
            if (document.getElementById("attractions").checked){
                showMarkers(attractionMarkers);
            } 

            // Deselect "Select-All" if any checkbox is checked - code generated by Xpert Learning Assistant (January 2025)
            if (this.id !== "select-all"){
                if (!this.checked){
                    document.getElementById("select-all").checked=false;
                }

                // Check if all individual checkboxes are checked
                const allChecked = document.getElementById("restaurants").checked && 
                                   document.getElementById("shows").checked && 
                                   document.getElementById("attractions").checked;

                // If all are checked, select "Select-All"
                document.getElementById("select-all").checked = allChecked;
            }
        });
    });

    // Create a "Select-All" checkbox - code generated by Xpert Learning Assistant (January 2025)
    document.getElementById("select-all").addEventListener("change", function(event){
        const isChecked = this.checked;
        document.getElementById("restaurants").checked = isChecked;
        document.getElementById("shows").checked = isChecked; 
        document.getElementById("attractions").checked = isChecked;

        // Show and hide markers
        if (isChecked){
            showMarkers(restaurantMarkers);
            showMarkers(showsMarkers);
            showMarkers(attractionMarkers);
        } else {
            hideMarkers(restaurantMarkers);
            hideMarkers(showsMarkers);
            hideMarkers(attractionMarkers);
        }
    });

    // Set "Select-All" checked when page loads - code generated by Xpert Learning Assistant (January 2025)
    document.getElementById("select-all").checked = true;
    document.getElementById("restaurants").checked = true;
    document.getElementById("shows").checked = true;
    document.getElementById("attractions").checked = true;
    document.getElement

    // Show all markers when page loads
    showMarkers(restaurantMarkers);
    showMarkers(showsMarkers);
    showMarkers(attractionMarkers);

    // Double check the sum of entities per category
    console.log(restaurantMarkers.length);
    console.log(showsMarkers.length);
    console.log(attractionMarkers.length);

    // Load Disney CSV file using D3.js
    // d3.csv('Weather/Resources/combined_weather_f.csv').then(function(weatherData){
        
    //     // Check results
    //     console.log(weatherData[0]);

    //     // Add weather info box in Leaflet - code generated by OpenAI's ChatGPT (January 2025)
    //     let weatherBox = L.control({position: 'topright'});

    //     weatherBox.onAdd = function(map){
    //         this._div = L.DomUtil.create('div', 'weatherBox');
    //         this.update();
    //         return this._div;
    //     };

    //     // Weather info to add in box - code generated by OpenAI's ChatGPT (January 2025)
    //     weatherBox.update = function(info){
    //         if (info){

    //             // Round temperature
    //             const lowTemp = Math.round(info.tmin_f);
    //             const highTemp = Math.round(info.tmax_f);

    //             this._div.innerHTML = `<h4 class="weather-title">Disney Weather</h4><hr>
    //                                    <p>Low: ${lowTemp}° High: ${highTemp}°</p>`
    //         } else{
    //             this._div.innerHTML = `<h4 class="weather-title">Disney Weather</h4><hr>
    //                                    <p>No data available for selected date</p>`;
    //         }
    //     };

    //     weatherBox.addTo(map);

    //     // Create event listener for search button
    //     document.getElementById('searchButton').addEventListener('click', function(){
    //         let selectedDate = document.getElementById('dateInput').value;

    //         // Get temp based on selected date - code generated by OpenAI's ChatGPT (January 2025)
    //         let result = weatherData.find(row => row.date.trim() === selectedDate);

    //         if (result){
    //             weatherBox.update({
    //                 date: selectedDate,
    //                 tmin_f: result.tmin_f,
    //                 tmax_f: result.tmax_f
    //             });
    //         } else{
    //             weatherBox.update();
    //         }
    //     });
    // });
});